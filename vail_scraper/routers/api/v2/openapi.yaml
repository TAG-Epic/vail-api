openapi: "3.1.0"
info:
  title: "Vail scraper API"
  version: "2"
  summary: "Automatically scrapes vail's API and returns it in a usable format"
  description: |
    Rate limits are per-ip, however overrides may be added if you ask.
  license:
    name: "GPL v3"
    identifier: "GPL-3.0"
  contact:
    name: "Discord"
    url: "https://discord.com/users/397745647723216898"

servers:
  - description: "Production"
    url: "https://vail-scraper.farfrom.world/api/v2"
  - description: "Local instance"
    url: "http://localhost:8000/api/v2"
tags:
  - name: "users"
    description: "Information about users"
  - name: "game"
    description: "Game wide endpoints"
    
paths:
  /users/search:
    get:
      operationId: "searchForUser"
      summary: "Search for a VAIL user"
      description: |
        # Info
        Search for a user
        
        # Notice
        The current implementation returns the first 50 records which contain the `name` in the order they are in the database.
        This means that some names like "Pan" or "Tea" is impossible to search for right now.
        This endpoint uses a local db, so a user that *just* started VAIL might not show up immidietly.
        
        # Rate limits
        This endpoint is currently not rate limited.
      tags: ["users"]
      
      parameters:
        - name: "name"
          description: "the username to search for. Note that this searches for the *username* not *display name*"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/UserName"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                required:
                  - "items"
                properties:
                  items:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/UserInfo"
  /users/{user_id}:
    get:
      operationId: "getUserInfo"
      summary: "Get user info by id"
      description: |
          # Info
          Get user info by id
          
          # Notice
          This endpoint uses a local db, so a user that *just* started VAIL might not show up immidietly.

          # Rate limits
          This endpoint is currently not rate limited.
      tags: ["users"]

      parameters:
        - name: "user_id"
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/UserId"
      responses:
        "200":
          description: "User found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        "404":
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundOrScrapedError"
  /users/{user_id}/stats:
    get:
      operationId: "getUserStats"
      summary: "Get user stats"
      description: |
          # Info
          Get someone's quick play stats
          
          # Notice
          This doesn't count customs.

          # Rate limits
          This endpoint has a limit of 5 requests per 5 seconds.
      tags: ["users"]
      
      parameters:
        - name: "user_id"
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/UserId"
      
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStats"
        "404":
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundError"
        "429":
          $ref: "#/components/responses/RateLimited"
  /users/{user_id}/stats/timeseries:
    get:
      operationId: "getUserStatsTimeseries"
      summary: "Get user historical stats"
      description: |
          # Info
          Get someone's quick play stats from back in time
          
          # What stats are tracked
          This doesn't count customs.
          
          # Sorting of response items
          Providing `after`: lowest matching timestamp -> highest
        
          Providing `before`: highest matching timestamp -> lowest
        
          Providing nothing: most recent scrape -> oldest scrape
        

          # Rate limits
          This endpoint is currently not rate limited.
      tags: ["users"]
      
      parameters:
        - name: "user_id"
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/UserId"
        - name: "before"
          in: "query"
          description: |
            This is mutually exclusive with `after`
            
            **NOTE** Please read the request description regarding sorting
          schema:
            $ref: "#/components/schemas/Timestamp"
            description: "if not sent this will default to the current timestamp"
        - name: "after"
          in: "query"
          description: |
            This is mutually exclusive with `before`
            
            **NOTE** Please read the request description regarding sorting
          schema:
            $ref: "#/components/schemas/Timestamp"
            default: 0
        - name: "limit"
          in: "query"
          schema:
            type: "number"
            default: 100
            minimum: 0
            maximum: 100
      
      responses:
        "200":
          description: "Success"
          content:
            application/json:
               schema:
                 type: "object"
                 required:
                   - "items"
                 properties:
                   items:
                     type: "array"
                     items:
                       $ref: "#/components/schemas/UserStatsTimeseriesEntry"
        "404":
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundError"
        "400":
           description: "You did something stupid"
           content:
             application/json:
               schema:
                 oneOf:
                   - $ref: "#/components/schemas/QueryParamInvalidError"
                   - $ref: "#/components/schemas/MutuallyExclusiveQueryParametersError"
  /game/user-count:
    get:
      operationId: "getGameUserCount"
      summary: "Get how many VAIL users exists"
      description: |
        # Info
        Get how many people have a account on vail
        
        # Notice
        This only counts people who have started vail once.
        
        Users who use family sharing will get one account counted per "account" in the family share
        
        Users who create "full" accounts through https://login.vailvr.com will only count once despite being on steam and oculus.
        
        # Rate limits
        This endpoint is currently not rate limited.
      tags: ["game"]
      
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                required:
                  - "count"
                properties:
                  count:
                    type: "integer"
                    description: "How many VAIL users exists"
  /game/user-count/timeseries:
    get:
      operationId: "getGameUserCountTimeseries"
      summary: "Get how many users vail has over time"
      description: |
        # Info
        Get how many people have a account on VAIL
        
        # What counts as a VAIL user?
        This only counts people who have started vail once.
        
        Users who use family sharing will get one account counted per "account" in the family share
        
        Users who create "full" accounts through https://login.vailvr.com will only count once despite being on steam and oculus.
        
        # Sorting of response items
        Providing `after`: lowest matching timestamp -> highest
        
        Providing `before`: highest matching timestamp -> lowest
        
        Providing nothing: most recent scrape -> oldest scrape
        
        # Rate limits
        This endpoint is currently not rate limited.
      tags: ["game"]
      
      parameters:
        - name: "before"
          description: |
            This is mutually exclusive with `after`
            
            **NOTE** Please read the request description regarding sorting
          in: "query"
          schema:
            $ref: "#/components/schemas/Timestamp"
            description: "if not sent this will default to the current timestamp"
        - name: "after"
          in: "query"
          description: |
            This is mutually exclusive with `before`
            
            **NOTE** Please read the request description regarding sorting
          schema:
            $ref: "#/components/schemas/Timestamp"
            default: 0
        - name: "limit"
          in: "query"
          schema:
            type: "number"
            default: 100
            minimum: 0
            maximum: 100
      responses:
        "200":
          description: "Success"
          content:
             application/json:
               schema:
                 type: "object"
                 required:
                   - "items"
                 properties:
                   items:
                     type: "array"
                     items:
                       $ref: "#/components/schemas/UserCountTimeseriesEntry"
        "400":
           description: "You did something stupid"
           content:
             application/json:
               schema:
                 oneOf:
                   - $ref: "#/components/schemas/QueryParamInvalidError"
                   - $ref: "#/components/schemas/MutuallyExclusiveQueryParametersError"
                   
             
components:
  responses:
    RateLimited:
      description: |
        You have been rate limited.
        
        If there is a legitimite reason you are consistently hitting this, please contact me and I will potentially grant an override.
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "code"
              - "detail"  
            properties:
              code:
                type: "string"
                enum:
                  - "rate_limited"
              detail:
                type: "string"
                example: "rate limited"

  schemas:
    UserName:
      type: "string"
      example: "FarrisVR"
    UserId:
      type: "string"
      format: "uuid-no-dashes"
      example: "086c0bdf4c8247eda847f876b49c057a"
    UserInfo:
      type: "object"
      required:
        - "name"
        - "id"
        
      properties:
        id:
          $ref: "#/components/schemas/UserId"
        name:
          $ref: "#/components/schemas/UserName"
    Timestamp:
      type: "number"
      format: "unix timestamp"
      example: 1717260094.5
    StringTimestamp:
      type: "string"
      format: "unix timestamp"
      example: "1717260094.5"
    
    # User stats
    UserStats:
      type: "object"
      required:
        - "maps"
        - "weapons"
        - "gamemodes"
        - "general"
        
      properties:
        maps:
          $ref: "#/components/schemas/UserMapsStats"
        weapons:
          $ref: "#/components/schemas/UserWeaponsStats"
        gamemodes:
          $ref: "#/components/schemas/UserGamemodeStats"
        general:
          $ref: "#/components/schemas/UserGeneralStats"
    UserStatsTimeseriesEntry:
      type: "object"
      required:
        - "maps"
        - "weapons"
        - "gamemodes"
        - "general"
        
      properties:
        maps:
          $ref: "#/components/schemas/UserMapsStats"
        weapons:
          $ref: "#/components/schemas/UserWeaponsStats"
        gamemodes:
          $ref: "#/components/schemas/UserGamemodeStats"
        general:
          $ref: "#/components/schemas/UserGeneralStats"
        timestamp:
          $ref: "#/components/schemas/StringTimestamp"
    UserMapsStats:
      type: "object"
      required:
        - "nine"
        - "thevoid"
        - "miru"
        - "suna"
        - "atmos"
        - "volt"
        - "cliffside"
        - "khidi"
        - "este"
        - "maar"
        
      properties:
        nine:
          $ref: "#/components/schemas/UserMapStats"
        thevoid:
          $ref: "#/components/schemas/UserMapStats"
        miru:
          $ref: "#/components/schemas/UserMapStats"
        suna:
          $ref: "#/components/schemas/UserMapStats"
        atmos:
          $ref: "#/components/schemas/UserMapStats"
        volt:
          $ref: "#/components/schemas/UserMapStats"
        cliffside:
          $ref: "#/components/schemas/UserMapStats"
        khidi:
          $ref: "#/components/schemas/UserMapStats"
        este:
          $ref: "#/components/schemas/UserMapStats"
        maar:
          $ref: "#/components/schemas/UserMapStats"
    UserMapStats:
      type: "object"
      required:
        - "match_results"
      properties:
        match_results:
          $ref: "#/components/schemas/UserStatsMapMatchResults"
    UserStatsMapMatchResults:
      type: "object"
      required:
        - "wins"
        - "losses"
        - "draws"
        - "abandons"
      properties:
        wins:
          type: "number"
        losses:
          type: "number"
        draws:
          type: "number"
        abandons:
          type: "number"
          
    UserWeaponsStats:
      type: "object"
      required:
        - "kanto"
        - "scarh"
        - "pl14"
        - "pm9"
        - "ump45"
        - "mk23"
        - "vityaz"
        - "g17"
        - "grotb"
        - "vector45"
        - "deagle"
        - "apc9pro"
        - "ak12"
        - "g28z"
        - "mr96"
        - "stf12"
        - "mk418"
        - "ak303n"
        - "m2rifled"
      properties:
        kanto:
          $ref: "#/components/schemas/UserStatsWeaponKanto"
        scarh:
          $ref: "#/components/schemas/UserStatsWeaponGunGeneric"
        pl14:
          $ref: "#/components/schemas/UserStatsWeaponGunGeneric"
        pm9:
          $ref: "#/components/schemas/UserStatsWeaponGunGeneric"
        ump45:
          $ref: "#/components/schemas/UserStatsWeaponGunGeneric"
        mk23:
          $ref: "#/components/schemas/UserStatsWeaponGunGeneric"
        vityaz:
          $ref: "#/components/schemas/UserStatsWeaponGunGeneric"
        g17:
          $ref: "#/components/schemas/UserStatsWeaponGunGeneric"
        grotb:
          $ref: "#/components/schemas/UserStatsWeaponGunGeneric"
        vector45:
          $ref: "#/components/schemas/UserStatsWeaponGunGeneric"
        deagle:
          $ref: "#/components/schemas/UserStatsWeaponGunGeneric"
        apc9pro:
          $ref: "#/components/schemas/UserStatsWeaponGunGeneric"
        ak12:
          $ref: "#/components/schemas/UserStatsWeaponGunGeneric"
        g28z:
          $ref: "#/components/schemas/UserStatsWeaponGunGeneric"
        mr96:
          $ref: "#/components/schemas/UserStatsWeaponGunGeneric"
        stf12:
          $ref: "#/components/schemas/UserStatsWeaponGunGeneric"
        mk418:
          $ref: "#/components/schemas/UserStatsWeaponGunGeneric"
        ak303n:
          $ref: "#/components/schemas/UserStatsWeaponGunGeneric"
        m2rifled:
          $ref: "#/components/schemas/UserStatsWeaponGunGeneric"
        
    UserStatsWeaponGunGeneric:
      type: "object"
      required:
        - "kills"
        - "shots"
      properties:
        kills:
          type: "object"
          required:
            - "total"
            - "headshot_kills"
          properties:
            total:
              type: "number"
            headshot_kills:
              type: "number"
        shots:
          type: "object"
          required:
            - "fired"
            - "hits"
          properties:
            fired:
              type: "number"
            hits:
              type: "object"
              required:
                - "head"
                - "body"
                - "arm"
                - "leg"
              properties:
                head:
                  type: "number"
                body:
                  type: "number"
                arm:
                  type: "number"
                leg:
                  type: "number"
    UserStatsWeaponKanto:
      type: "object"
      required:
        - "kills"
      properties:
        kills:
          type: "object"
          required:
            - "total"
            - "headshot_kills"
          properties:
            total:
              type: "number"
            headshot_kills:
              type: "number"
              
    UserGamemodeStats:
      type: "object"
      required:
        - "artifact"
        - "capture_the_orb"
        - "team_deathmatch"
        - "scoutzknivez"
        - "hardpoint"
        - "free_for_all"
        - "gun_game"
        - "one_in_the_chamber"
      properties:
        artifact:
          $ref: "#/components/schemas/UserGamemodeArtifactStats"
        capture_the_orb:
          $ref: "#/components/schemas/UserGamemodeCaptureTheOrbStats"
        team_deathmatch:
          $ref: "#/components/schemas/UserGamemodeTeamDeathmatchStats"
        scoutzknivez:
          $ref: "#/components/schemas/UserGamemodeScoutzknivezStats"
        hardpoint:
          $ref: "#/components/schemas/UserGamemodeHardpointStats"
        free_for_all:
          $ref: "#/components/schemas/UserGamemodeFreeForAllStats"
        gun_game:
          $ref: "#/components/schemas/UserGamemodeGunGameStats"
        one_in_the_chamber:
          $ref: "#/components/schemas/UserGamemodeOneInTheChamberStats"
    UserGamemodeArtifactStats:
      type: "object"
      required:
        - "time_played_seconds"
        - "kills_and_deaths"
        - "scanner"
        - "match_results"
        - "round_results"
      properties:
        time_played_seconds:
          type: "number"
        kills_and_deaths:
          type: "object"
          required:
            - "kills"
            - "aces"
            - "assists"
            - "deaths"
          properties:
            kills:
              type: "number"
            aces:
              type: "number"
            assists:
              type: "number"
            deaths:
              type: "number"
        scanner:
          type: "object"
          required:
            - "planted"
            - "disabled"
          properties:
            planted:
              type: "number"
            disabled:
              type: "number"
        match_results:
          type: "object"
          required:
            - "wins"
            - "losses"
            - "abandons"
          properties:
            wins:
              type: "number"
            losses:
              type: "number"
            abandons:
              type: "number"
        round_results:
          type: "object"
          required:
            - "pistol_round"
            - "reyab"
          properties:
            pistol_round:
              type: "object"
              properties:
                wins:
                  type: "number"
                losses:
                  type: "number"
            reyab:
              type: "object"
              properties:
                wins:
                  type: "number"
                losses:
                  type: "number"
    UserGamemodeCaptureTheOrbStats:
      type: "object"
      required:
        - "time_played_seconds"
        - "kills_and_deaths"
        - "match_results"
      properties:
        time_played_seconds:
          type: "number"
        kills_and_deaths:
          type: "object"
          required:
            - "kills"
            - "kills_on_orb_carrier"
            - "kills_as_orb_carrier"
            - "assists"
            - "deaths"
          properties:
            kills:
              type: "number"
            kills_on_orb_carrier:
              type: "number"
            kills_as_orb_carrier:
              type: "number"
            assists:
              type: "number"
            deaths:
              type: "number"
        orb:
          type: "object"
          required:
            - "steals"
            - "recovers"
            - "captures"
          properties:
            steals:
              type: "number"
            recovers:
              type: "number"
            captures:
              type: "number"
        match_results:
          type: "object"
          required:
            - "wins"
            - "draws"
            - "losses"
            - "abandons"
          properties:
            wins:
              type: "number"
            draws:
              type: "number"
            losses:
              type: "number"
            abandons:
              type: "number"
    UserGamemodeTeamDeathmatchStats:
      type: "object"
      required:
        - "time_played_seconds"
        - "kills_and_deaths"
        - "match_results"
      properties:
        time_played_seconds:
          type: "number"
        kills_and_deaths:
          type: "object"
          required:
            - "kills"
            - "assists"
            - "deaths"
          properties:
            kills:
              type: "number"
            assists:
              type: "number"
            deaths:
              type: "number"
        match_results:
          type: "object"
          required:
            - "wins"
            - "draws"
            - "losses"
            - "abandons"
          properties:
            wins:
              type: "number"
            draws:
              type: "number"
            losses:
              type: "number"
            abandons:
              type: "number"
              
    UserGamemodeScoutzknivezStats:
      type: "object"
      required:
        - "time_played_seconds"
        - "kills_and_deaths"
        - "match_results"
      properties:
        time_played_seconds:
          type: "number"
        kills_and_deaths:
          type: "object"
          required:
            - "kills"
            - "assists"
            - "deaths"
          properties:
            kills:
              type: "number"
            assists:
              type: "number"
            deaths:
              type: "number"
        match_results:
          type: "object"
          required:
            - "wins"
            - "draws"
            - "losses"
            - "abandons"
          properties:
            wins:
              type: "number"
            draws:
              type: "number"
            losses:
              type: "number"
            abandons:
              type: "number"
    UserGamemodeHardpointStats:
      type: "object"
      required:
        - "time_played_seconds"
        - "kills_and_deaths"
        - "match_results"
      properties:
        time_played_seconds:
          type: "number"
        kills_and_deaths:
          type: "object"
          required:
            - "kills"
            - "assists"
            - "deaths"
          properties:
            kills:
              type: "number"
            assists:
              type: "number"
            deaths:
              type: "number"
        point:  
          type: "object"
          required:
            - "first_captures"
          properties:
            first_captures:
              type: "number"
        match_results:
          type: "object"
          required:
            - "wins"
            - "draws"
            - "losses"
            - "abandons"
          properties:
            wins:
              type: "number"
            draws:
              type: "number"
            losses:
              type: "number"
            abandons:
              type: "number"
    UserGamemodeFreeForAllStats:
      type: "object"
      required:
        - "time_played_seconds"
        - "kills_and_deaths"
        - "match_results"
      properties:
        time_played_seconds:
          type: "number"
        kills_and_deaths:
          type: "object"
          required:
            - "kills"
            - "assists"
            - "deaths"
          properties:
            kills:
              type: "number"
            assists:
              type: "number"
            deaths:
              type: "number"
        match_results:
          type: "object"
          required:
            - "wins"
            - "losses"
            - "abandons"
          properties:
            wins:
              type: "number"
            losses:
              type: "number"
            abandons:
              type: "number"
    UserGamemodeGunGameStats:
      type: "object"
      required:
        - "time_played_seconds"
        - "kills_and_deaths"
        - "match_results"
      properties:
        time_played_seconds:
          type: "number"
        kills_and_deaths:
          type: "object"
          required:
            - "kills"
            - "assists"
            - "deaths"
          properties:
            kills:
              type: "number"
            assists:
              type: "number"
            deaths:
              type: "number"
        match_results:
          type: "object"
          required:
            - "wins"
            - "losses"
            - "abandons"
          properties:
            wins:
              type: "number"
            losses:
              type: "number"
            abandons:
              type: "number"
    UserGamemodeOneInTheChamberStats:
      type: "object"
      required:
        - "time_played_seconds"
        - "kills_and_deaths"
        - "match_results"
      properties:
        time_played_seconds:
          type: "number"
        kills_and_deaths:
          type: "object"
          required:
            - "kills"
            - "assists"
            - "deaths"
          properties:
            kills:
              type: "number"
            assists:
              type: "number"
            deaths:
              type: "number"
        match_results:
          type: "object"
          required:
            - "wins"
            - "draws"
            - "losses"
            - "abandons"
          properties:
            wins:
              type: "number"
            draws:
              type: "number"
            losses:
              type: "number"
            abandons:
              type: "number"
    UserGeneralStats:
      type: "object"
      properties:
        time_played_seconds:
          type: "number"
        kills_and_deaths:
          type: "object"
          required:
            - "kills"
            - "assists"
            - "deaths"
            - "bursts"
          properties:
            kills:
              type: "number"
            assists:
              type: "number"
            deaths:
              type: "number"
            bursts:
              type: "object"
              required:
                - "2"
                - "3"
                - "5"
              properties:
                "2":
                  type: "number"
                "3":
                  type: "number"
                "5":
                  type: "number"
        match_results:
           type: "object"
           required:
             - "wins"
             - "draws"
             - "losses"
             - "abandons"
           properties:
             wins:
               type: "number"
             draws:
               type: "number"
             losses:
               type: "number"
             abandons:
               type: "number"
        prestige:
          type: "number"

              
    # User count
    UserCountTimeseriesEntry:
      type: "object"
      required:
        - "timestamp"
        - "count"
      properties:
        timestamp:
          $ref: "#/components/schemas/StringTimestamp"
        count:
          type: "integer"
    
          
    
    # Errors
    UserNotFoundError:
      type: "object"
      required:
        - "code"
        - "detail"
      properties:
        code:
          type: "string"
          enum:
            - "user_not_found"
        detail:
          type: "string"
          example: "user not found"
    UserNotFoundOrScrapedError:
      type: "object"
      required:
        - "code"
        - "detail"
      properties:
        code:
          type: "string"
          enum:
            - "user_not_found"
        detail:
          type: "string"
          example: "user not found/not scraped yet"
    QueryParamInvalidError:
      type: "object"
      required:
        - "code"
        - "detail"
        - "field"
      properties:
        code:
          type: "string"
          enum:
            - "query_parameter_invalid"
        detail:
          type: "string"
          example: "failed to parse the after parameter"
        field:
          type: "string"
    MutuallyExclusiveQueryParametersError:
      type: "object"
      required:
        - "code"
        - "detail"
      properties:
        code:
          type: "string"
          enum:
            - "mutually_exclusive_query_parameters"
        detail:
          type: "string"
          example: "the before and after query parameters are mutually exclusive"

